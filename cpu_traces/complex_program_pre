main:
	addi x5, x0, 0		// address *mat init
	addi x6, x0, 0		// mat[i] data init
	addi x7, x0, 128	// i<16 max

	addi x10, x5, 0 	// matrix_opr(arg1) *mat

	sd x6, 0(x5) 		// mat[0 - 15]
	add x6, x6, 1		// mat[i] = i
	addi x5, x5, 8		// address pointer
	blt x5, x7, -12		// i<16 loop
	
	addi x5, x5, 8		// address *out init
	addi x11, x5, 0		// matrix_opr(arg2) *out 

	jal matrix_opr, 0	// call function

shift:
	addi x2, x2, -8		// move stack pointer
	sd x20, 0(x2)		// move return reg to stack
	sll x20, x10, x11	// return arg1 << arg2
	addi x10, x20, 0	// put in x10 for return
	ld x20, 0(x2)		// restore stack variables
	addi x2, x2, 8		// restore stack pointer
	jalr x0, 0(x1)

matrix_opr:
	addi x2, x2, -24 	//move stack pointer
	sd x11, 16(x2) 		// save *out
	sd x10, 8(x2)  		// save *mat
	sd x1, 0(x2)   		// save return sp address

	addi x25, x10, 0 	// store *mat
	addi x26, x11, 0 	// store *out
	addi x27, x0, 0 	// current sum
	addi x28, x26, 0 	// current pointer in out array 

	addi x5, x0, 0 		// i = 0
	addi x6, x0, 0 		// j = 0
	addi x7, x0, 4 		//i/j max


	ld x10, 0(x25) 		// shift(arg1)
	addi x11, x5, 0		// shift(arg2)
	jal shift, 0 		// call func, result in x10
	addi x27, x27, x10 	// res += shift(..) 
	addi x6, x6, 1 		// j++
	blt x6, x7, -40		// j<4 loop
	addi x5, x5, 1 		// i++
	ld x28, 0(x27) 		// out[i] = ...+...+...+...
	addi x6, x0, 0		// out[i] = 0
	blt x5, x7, -72		// i<4 loop
	
	ld x1, 0(x2)		// restore return address
	ld x10, 8(x10)		// restore arg1
	ld x11, 16(x11)		// restore arg2
	addi x2, x2, 24		// restore stack pointer

	jalr x0, 0(x1) 		// return to main
